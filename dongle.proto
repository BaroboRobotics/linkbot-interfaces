// This file defines control messages transmitted between the Linkbot daemon (linkbotd) and Linkbot
// dongles (e.g., Z-Links or Linkbot robots themselves).

syntax = "proto2";

import "nanopb.proto";
import "radio.proto";

package linkbot.dongle;

// =============================================================================
// Dongle RPC messages

message GetFirmwareVersionString {
    message In {}
    message Out {
        optional string value = 1 [(nanopb).max_size = 128];
    }
}

message Reboot {
    message In {}
    message Out {}
}

enum RadioMode {
    FULL_DUPLEX = 0;
    TRANSMIT = 1;
    RECEIVE = 2;
    // TODO: promiscuous sniffer mode?
}

message SetRadioMode {
    message In {
        optional RadioMode mode = 1;
    }
    message Out {}
}

message SetSessionId {
    message In {
        optional uint32 sessionId = 1;
    }
    message Out {}
}

message Transmit {
    message In {
        optional radio.RoutedRadioMessage routedRadioMessage = 4;
    }
    message Out {
        optional int32 queuedMessages = 1;
    }
}

// =============================================================================
// Dongle interface

message RpcRequest {
    optional uint32 requestId = 1;

    oneof arg {
        GetFirmwareVersionString.In getFirmwareVersionString = 2;
        Reboot.In reboot = 3;
        SetRadioMode.In setRadioMode = 3;
        SetSessionId.In setSessionId = 5;
        Transmit.In transmit = 6;
    }
}

message RpcReply {
    optional uint32 requestId = 1;

    oneof arg {
        GetFirmwareVersionString.Out getFirmwareVersionString = 2;
        Reboot.Out reboot = 3;
        SetRadioMode.Out setRadioMode = 4;
        SetSessionId.Out setSessionId = 5;
        Transmit.Out transmit = 6;
    }
}

message ReceiveTransmission {
    optional radio.RoutedRadioMessage routedRadioMessage = 4;
}

message DebugMessage {
    optional string value = 1 [(nanopb).max_size = 128];
}

// =============================================================================
// Top-level dongle interface messages

message DaemonToDongle {
    // Message sent via SFP from linkbotd to a Z-Link or Linkbot acting as a dongle.

    oneof arg {
        RpcRequest rpcRequest = 1;
    }
}

message DongleToDaemon {
    // Message sent via SFP from a Z-Link or Linkbot acting as a dongle to linkbotd.

    oneof arg {
        RpcReply rpcReply = 1;

        ReceiveTransmission receiveTransmission = 2;
        DebugMessage debugMessage = 3;
    }
}
