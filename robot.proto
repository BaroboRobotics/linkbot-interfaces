// This file defines control messages transmitted between Linkbot clients (e.g., language bindings
// like liblinkbot) and Linkbot robots.

syntax = "proto2";

import "nanopb.proto";

package linkbot.robot;

// =============================================================================
// Robot RPC messages

message GetAccelerometerData {
    message In {}
    message Out {
        optional float x = 1;
        optional float y = 2;
        optional float z = 3;
    }
}

message GetBatteryVoltage {
    message In {
    }
    message Out {
        optional float v = 1;
    }
}

message GetAdcRaw {
    message In {
    }
    message Out {
        repeated uint32 values = 1[packed=true, (nanopb).max_count=32];
    }
}

message GetButtonState {
    message In {}
    message Out {
        // 000 = all buttons up
        // 001 = button POWER down
        // 010 = button A down
        // 100 = button B down
        optional uint32 mask = 1;
    }
}

message GetBuzzerFrequency {
    message In {}
    message Out {
        optional float value = 1;
    }
}

message GetEncoderValues {
    message In {}
    message Out {
        optional uint32 timestamp = 1;
        // realistically, the maximum number of encoder values we'll transmit
        // is 3, but to future-proof this, up the max_count to something
        // bigger.
        repeated float values = 2 [packed=true, (nanopb).max_count=32];
    }
}

message GetFirmwareVersionString {
    message In {}
    message Out {
        optional string value = 1 [(nanopb).max_size = 128];
    }
}

enum FormFactor {
    I = 0;
    L = 1;
    T = 2;
    DONGLE = 3;
}

message GetFormFactor {
    message In {}
    message Out {
        optional FormFactor value = 1;
    }
}

enum JointState {
    COAST = 0;
    HOLD = 1;
    MOVING = 2;
    ERROR = 4;
}

message GetJointStates {
    message In {}
    message Out{
        optional uint32 timestamp = 1;
        // See GetEncoderValues above
        repeated JointState values = 2 [packed=true, (nanopb).max_count=32];
    }
}

message GetLedColor {
    message In {}
    message Out {
        optional uint32 value = 1;
    }
}


// =============================================================================
// Motor Controllers
//
// - smooth acceleration
// - constant velocity (no goal)
// - constant velocity (to an absolute goal)
// - constant velocity (to a relative goal)
// - PID (to an absolute goal)
// - PID (to a relative goal)

// used by smooth acceleration, constant velocity
message GetMotorControllerOmega {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // deceleration
    }
}

// used by smooth acceleration
message GetMotorControllerAlphaI {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

// used by smooth acceleration
message GetMotorControllerAlphaF {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // deceleration
    }
}

// used by PID controller
message GetMotorControllerProportionalGain {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Proportional gain for PID controller
    }
}

// used by PID controller
message GetMotorControllerIntegratorGain {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Integrator gain for PID
    }
}

// used by PID controller
message GetMotorControllerDerivativeGain {
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // Derivative gain for PID 
    }
}

message GetMotorControllerSafetyThreshold {
    message In {
    }
    message Out {
        repeated uint32 values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

message GetMotorControllerSafetyAngle{
    message In {
    }
    message Out {
        repeated float values = 1[packed=true, (nanopb).max_count=32]; // acceleration
    }
}

// used by smooth acceleration, constant velocity
message SetMotorControllerOmega {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

// used by smooth acceleration
message SetMotorControllerAlphaI {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

// used by smooth acceleration
message SetMotorControllerAlphaF {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

// used by PID controller
message SetMotorControllerProportionalGain {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

// used by PID controller
message SetMotorControllerIntegratorGain {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

// used by PID controller
message SetMotorControllerDerivativeGain {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2[packed=true, (nanopb).max_count=32]; // Derivative gain for PID 
    }
    message Out {
    }
}

message SetMotorControllerSafetyThreshold {
    message In {
        optional uint32 mask = 1;
        repeated uint32 values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}

message SetMotorControllerSafetyAngle {
    message In {
        optional uint32 mask = 1;
        repeated float values = 2 [packed=true, (nanopb).max_count=32]; 
    }
    message Out {}
}


message ResetEncoderRevs {
    message In { }
    message Out { }
}

message SetBuzzerFrequency {
    message In {
        optional float value = 1;
    }
    message Out {}
}

message SetLedColor {
    message In {
        optional uint32 value = 1;
    }
    message Out {}
}

message Stop {
    message In {optional uint32 mask = 1;}
    message Out {}
}

// For standard acceleration:
// Controller: ACCEL
// goal : initial velocity
// AlphaI : Acceleration of motor
// AlphaF : Ignored: Set to 0
// timeout (optional) : When to stop the motor
// Omega : VMax

// For smooth motion:
// Controller: SMOOTH
// ABS(Omega) : VMax
// AlphaI : Starting Acceleration
// AlphaF : Ending Acceleration

message Goal {
    enum Type {
        ABSOLUTE = 1; // move to an absolute angle value
        RELATIVE = 2; // move to an angle value relative to the current motor angle
        INFINITE = 3; // just move, using goal as a coefficient to speed
                      // i.e., use 1.0 to move forward, -1.0 to move backward
    }
    enum Controller {
        PID = 1;
        CONSTVEL = 2;
        SMOOTH = 3;
        ACCEL = 4;
        CYCLOIDAL = 5;
        HARMONIC = 6;
    }
    optional Type type = 1;
    optional float goal = 2; // absolute, relative angles; or coefficient in infinite case
    // type and goal are actually required to do anything -- the rest of the values default to:
    // CONSTVEL, 0, HOLD

    optional Controller controller = 3;
    optional float timeout = 4; // Seconds from now to time out
    optional JointState modeOnTimeout = 5;
}

// notes: make motor controller attributes per motor
//        error if move is called on constant velocity-no goal controlled
//        motor?
message Move {
    message In {
        // TODO: get rid of this once we can send multiple messages per radio transmission
        optional Goal motorOneGoal = 1;
        optional Goal motorTwoGoal = 2;
        optional Goal motorThreeGoal = 3;
    }
    message Out { }
}

message EnableAccelerometerEvent {
    message In {
        optional bool enable = 1;
        optional float granularity = 2;
    }

    message Out{}
}

message EnableButtonEvent {
    message In{
        optional bool enable = 1;
    }
    message Out {}
}

message EnableEncoderEvent {
    message In{
        message SignalState{
            // TODO: get rid of this once we can send multiple radio messages per transmission
            optional bool enable = 1;
            optional float granularity = 2;
        }

        optional SignalState encoderOne = 1;
        optional SignalState encoderTwo = 2;
        optional SignalState encoderThree = 3;
    }
    message Out{}
}

message EnableJointEvent {
    message In{
        optional bool enable = 1;
    }
    message Out{}
}

message WriteEeprom {
    message In {
        optional uint32 address = 1;
        optional bytes data = 2 [(nanopb).max_size = 128];
    }
    message Out { }
}

message ReadEeprom {
    message In {
        optional uint32 address = 1;
        optional uint32 size = 2;
    }
    message Out {
        optional bytes data = 1[ (nanopb).max_size = 128];
    }
}

message WriteTwi {
    message In {
        optional uint32 address = 1;
        optional bytes data = 2 [(nanopb).max_size = 128];
    }
    
    message Out { }
}

message ReadTwi {
    message In { 
        optional uint32 address = 1; 
        optional uint32 recvsize = 2;
    } 
    message Out {
        optional bytes data = 2 [(nanopb).max_size = 128];
    }
}

message WriteReadTwi {
    message In {
        optional uint32 address = 1;
        optional uint32 recvsize = 2;
        optional bytes data = 3 [(nanopb).max_size = 128];
    }
    message Out {
        optional bytes data = 2 [(nanopb).max_size = 128];
    }
}

message Reboot {
    message In {}
    message Out {}
}

// =============================================================================
// Robot interface

message RpcRequest {
    // This message has a lot of fields. Since field tag numbers 1 - 15 require one byte on the
    // wire and 16 - 2047 require two bytes, priority for the low-numbered fields is given to RPC
    // requests which are small and bursty. Other, less frequently used requests are given field
    // tag numbers starting at 16.

    optional uint32 requestId = 1;

    oneof arg {
        // =====================================================================
        // Constant read-only attributes -- these values will not change during the execution of the
        // Linkbot firmware main program.

        GetFirmwareVersionString.In getFirmwareVersionString = 16;
        GetFormFactor.In getFormFactor = 17;

        // =====================================================================
        // Variable read-only attributes -- these values may change over the execution of the
        // Linkbot firmware main program.

        GetAdcRaw.In getAdcRaw = 18;
        GetBatteryVoltage.In getBatteryVoltage = 19;

        // =====================================================================
        // Streamable, variable read-only attributes -- these values may change over the execution
        // of the Linkbot firmware main program, AND you can stream updates to them via events.

        GetAccelerometerData.In getAccelerometerData = 20;
        GetButtonState.In getButtonState = 21;
        GetEncoderValues.In getEncoderValues = 22;
        GetJointStates.In getJointStates = 23;

        EnableAccelerometerEvent.In enableAccelerometerEvent = 24;
        EnableButtonEvent.In enableButtonEvent = 25;
        EnableEncoderEvent.In enableEncoderEvent = 26;
        EnableJointEvent.In enableJointEvent = 27;

        // =====================================================================
        // Read/write attributes -- you can adjust these values to modify the behavior of the
        // Linkbot firmware main program.

        GetBuzzerFrequency.In getBuzzerFrequency = 2;
        GetLedColor.In getLedColor = 3;

        GetMotorControllerOmega.In getMotorControllerOmega = 28;
        GetMotorControllerAlphaI.In getMotorControllerAlphaI = 29;
        GetMotorControllerAlphaF.In getMotorControllerAlphaF = 30;
        GetMotorControllerProportionalGain.In getMotorControllerProportionalGain = 31;
        GetMotorControllerIntegratorGain.In getMotorControllerIntegratorGain = 32;
        GetMotorControllerDerivativeGain.In getMotorControllerDerivativeGain = 33;
        GetMotorControllerSafetyThreshold.In getMotorControllerSafetyThreshold = 34;
        GetMotorControllerSafetyAngle.In getMotorControllerSafetyAngle = 35;

        SetBuzzerFrequency.In setBuzzerFrequency = 4;
        SetLedColor.In setLedColor = 5;

        SetMotorControllerOmega.In setMotorControllerOmega = 36;
        SetMotorControllerAlphaI.In setMotorControllerAlphaI = 37;
        SetMotorControllerAlphaF.In setMotorControllerAlphaF = 38;
        SetMotorControllerProportionalGain.In setMotorControllerProportionalGain = 39;
        SetMotorControllerIntegratorGain.In setMotorControllerIntegratorGain = 40;
        SetMotorControllerDerivativeGain.In setMotorControllerDerivativeGain = 41;
        SetMotorControllerSafetyThreshold.In setMotorControllerSafetyThreshold = 42;
        SetMotorControllerSafetyAngle.In setMotorControllerSafetyAngle = 43;

        // =====================================================================
        // Commands -- these messages have immediate side effects in the execution of the Linkbot
        // firmware main program.

        ResetEncoderRevs.In resetEncoderRevs = 44;
        Move.In move = 45;
        Stop.In stop = 46;
        Reboot.In reboot = 47;

        // =====================================================================
        // Read/write commands

        WriteEeprom.In writeEeprom = 48;
        ReadEeprom.In readEeprom = 49;

        WriteTwi.In writeTwi = 50;
        ReadTwi.In readTwi = 51;
        WriteReadTwi.In writeReadTwi = 52;
    }
}

message RpcReply {
    // As in RpcRequest, priority to low-numbered fields is given to small, bursty RPC replies.

    optional uint32 requestId = 1;

    oneof arg {
        // =====================================================================
        // Constant read-only attributes

        GetFirmwareVersionString.Out getFirmwareVersionString = 16;
        GetFormFactor.Out getFormFactor = 17;

        // =====================================================================
        // Variable read-only attributes

        GetAdcRaw.Out getAdcRaw = 18;
        GetBatteryVoltage.Out getBatteryVoltage = 19;

        // =====================================================================
        // Streamable, variable read-only attributes

        GetAccelerometerData.Out getAccelerometerData = 20;
        GetButtonState.Out getButtonState = 21;
        GetEncoderValues.Out getEncoderValues = 22;
        GetJointStates.Out getJointStates = 23;

        EnableAccelerometerEvent.Out enableAccelerometerEvent = 24;
        EnableButtonEvent.Out enableButtonEvent = 25;
        EnableEncoderEvent.Out enableEncoderEvent = 26;
        EnableJointEvent.Out enableJointEvent = 27;

        // =====================================================================
        // Read/write attributes

        GetBuzzerFrequency.Out getBuzzerFrequency = 2;
        GetLedColor.Out getLedColor = 3;

        GetMotorControllerOmega.Out getMotorControllerOmega = 28;
        GetMotorControllerAlphaI.Out getMotorControllerAlphaI = 29;
        GetMotorControllerAlphaF.Out getMotorControllerAlphaF = 30;
        GetMotorControllerProportionalGain.Out getMotorControllerProportionalGain = 31;
        GetMotorControllerIntegratorGain.Out getMotorControllerIntegratorGain = 32;
        GetMotorControllerDerivativeGain.Out getMotorControllerDerivativeGain = 33;
        GetMotorControllerSafetyThreshold.Out getMotorControllerSafetyThreshold = 34;
        GetMotorControllerSafetyAngle.Out getMotorControllerSafetyAngle = 35;

        SetBuzzerFrequency.Out setBuzzerFrequency = 4;
        SetLedColor.Out setLedColor = 5;

        SetMotorControllerOmega.Out setMotorControllerOmega = 36;
        SetMotorControllerAlphaI.Out setMotorControllerAlphaI = 37;
        SetMotorControllerAlphaF.Out setMotorControllerAlphaF = 38;
        SetMotorControllerProportionalGain.Out setMotorControllerProportionalGain = 39;
        SetMotorControllerIntegratorGain.Out setMotorControllerIntegratorGain = 40;
        SetMotorControllerDerivativeGain.Out setMotorControllerDerivativeGain = 41;
        SetMotorControllerSafetyThreshold.Out setMotorControllerSafetyThreshold = 42;
        SetMotorControllerSafetyAngle.Out setMotorControllerSafetyAngle = 43;

        // =====================================================================
        // Commands

        ResetEncoderRevs.Out resetEncoderRevs = 44;
        Move.Out move = 45;
        Stop.Out stop = 46;
        Reboot.Out reboot = 47;

        // =====================================================================
        // Read/write commands

        WriteEeprom.Out writeEeprom = 48;
        ReadEeprom.Out readEeprom = 49;

        WriteTwi.Out writeTwi = 50;
        ReadTwi.Out readTwi = 51;
        WriteReadTwi.Out writeReadTwi = 52;
    }
}

enum Button {
    POWER = 0;
    A = 1;
    B = 2;
}

enum ButtonState {
    UP = 0;
    DOWN = 1;
}

message ButtonEvent {
    optional uint32 timestamp = 1;
    optional Button button = 2;
    optional ButtonState state = 3;
}

message EncoderEvent {
    optional uint32 timestamp = 1;
    optional uint32 encoder = 2;
    optional float value = 3;
}

message AccelerometerEvent {
    optional uint32 timestamp = 1;
    optional float x = 2;
    optional float y = 3;
    optional float z = 4;
}

message JointEvent {
    optional uint32 timestamp = 1;
    optional uint32 joint = 2;
    optional JointState event = 3;
    optional float angle = 4;
}

message DebugMessageEvent {
    optional uint32 timestamp = 1;
    optional string bytestring = 2 [(nanopb).max_size=128];
}

message ConnectionTerminated {
    optional uint32 timestamp = 1;
}

message PowerOnEvent {
    // Radio broadcast from a robot to all daemons.
    optional string version = 1 [(nanopb).max_size = 128];
}

enum Peripheral {
    MOTOR1 = 0;
    MOTOR2 = 1;
    MOTOR3 = 2;
    LED = 3;
    BUZZER = 4;
}

message Ping {
    // Radio broadcast from the daemon to multiple robots.
    optional uint32 peripheralResetMask = 2;
    // Define by `mask |= (1 << linkbot_robot_Peripheral_MOTOR1)`, etc.
}

// =============================================================================
// Top-level robot interface messages

message ClientToRobot {
    oneof arg {
        RpcRequest rpcRequest = 1;

        Ping ping = 2;
        // deprecated? move to hypothetical daemon-to-robot interface?
    }
}

message RobotToClient {
    oneof arg {
        RpcReply rpcReply = 1;

        AccelerometerEvent accelerometerEvent = 2;
        ButtonEvent buttonEvent = 3;
        EncoderEvent encoderEvent = 4;
        JointEvent jointEvent = 5;

        DebugMessageEvent debugMessageEvent = 6;

        ConnectionTerminated connectionTerminated = 7;
        PowerOnEvent powerOnEvent = 8;
        // deprecated? move to hypothetical daemon-to-robot interface?
    }
}
